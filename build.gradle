buildscript {
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.5.4"
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2"
    }
}


plugins {
    id 'java'
    id 'idea'
    id 'jacoco'
    id 'antlr'
    id 'maven'
    id 'signing'
    id 'com.github.kt3k.coveralls' version '2.8.4'
    id 'net.researchgate.release' version '2.6.0'
}

jacoco {
    toolVersion = "0.8.4"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,
                    excludes: [
                            '**/omql/parser/**',
                            '**/Immutable*Condition.class',
                            '**/CompileDebugger.class'
                    ])
        })
    }
}

group 'net.ninjacat'
version '0.2.0-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8


repositories {
    mavenCentral()
}

dependencies {
    compileOnly 'org.immutables:value:2.7.4'
    annotationProcessor 'org.immutables:value:2.7.4'

    implementation 'net.jcip:jcip-annotations:1.0'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.ow2.asm:asm:7.1'
    implementation 'org.ow2.asm:asm-commons:7.1'
    implementation 'org.ow2.asm:asm-util:7.1'
    implementation 'io.vavr:vavr:0.10.2'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.0.1'
    implementation 'org.antlr:antlr4-runtime:4.7.2'

    antlr 'org.antlr:antlr4:4.7.2'

    testCompileOnly 'org.immutables:value:2.7.4'
    testAnnotationProcessor 'org.immutables:value:2.7.4'

    testImplementation 'org.hamcrest:hamcrest:2.1'
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}
